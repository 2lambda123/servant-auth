# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs '--branch' 'master' '-f' '-o' '.travis.yml' 'cabal.project'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

branches:
  only:
    - master

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:
    - compiler: "ghc-7.10.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.10.3], sources: [hvr-ghc]}}
    - compiler: "ghc-8.0.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.2], sources: [hvr-ghc]}}
    - compiler: "ghc-8.2.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.2.2], sources: [hvr-ghc]}}

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER

install:
  - cabal --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - INSTALLED=${INSTALLED-true}
  - GHCHEAD=${GHCHEAD-false}
  - travis_retry cabal update -v
  - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  - rm -fv cabal.project cabal.project.local
  - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
  - "printf 'packages: \"servant-auth\" \"servant-auth-client\" \"servant-auth-docs\" \"servant-auth-server\" \"servant-auth-swagger\"\\n' > cabal.project"
  - cat cabal.project
  - if [ -f "servant-auth/configure.ac" ]; then
      (cd "servant-auth" && autoreconf -i);
    fi
  - if [ -f "servant-auth-client/configure.ac" ]; then
      (cd "servant-auth-client" && autoreconf -i);
    fi
  - if [ -f "servant-auth-docs/configure.ac" ]; then
      (cd "servant-auth-docs" && autoreconf -i);
    fi
  - if [ -f "servant-auth-server/configure.ac" ]; then
      (cd "servant-auth-server" && autoreconf -i);
    fi
  - if [ -f "servant-auth-swagger/configure.ac" ]; then
      (cd "servant-auth-swagger" && autoreconf -i);
    fi
  - rm -f cabal.project.freeze
  - cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dep -j2 all
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dep -j2 all
  - rm -rf "servant-auth"/.ghc.environment.* "servant-auth-client"/.ghc.environment.* "servant-auth-docs"/.ghc.environment.* "servant-auth-server"/.ghc.environment.* "servant-auth-swagger"/.ghc.environment.* "servant-auth"/dist "servant-auth-client"/dist "servant-auth-docs"/dist "servant-auth-server"/dist "servant-auth-swagger"/dist
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # test that source-distributions can be generated
  - echo Packaging... && echo -en 'travis_fold:start:sdist\\r'
  - (cd "servant-auth" && cabal sdist)
  - (cd "servant-auth-client" && cabal sdist)
  - (cd "servant-auth-docs" && cabal sdist)
  - (cd "servant-auth-server" && cabal sdist)
  - (cd "servant-auth-swagger" && cabal sdist)
  - echo -en 'travis_fold:end:sdist\\r'
  - echo Unpacking... && echo -en 'travis_fold:start:unpack\\r'
  - mv "servant-auth"/dist/servant-auth-*.tar.gz "servant-auth-client"/dist/servant-auth-client-*.tar.gz "servant-auth-docs"/dist/servant-auth-docs-*.tar.gz "servant-auth-server"/dist/servant-auth-server-*.tar.gz "servant-auth-swagger"/dist/servant-auth-swagger-*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
  - "printf 'packages: servant-auth-*/*.cabal servant-auth-client-*/*.cabal servant-auth-docs-*/*.cabal servant-auth-server-*/*.cabal servant-auth-swagger-*/*.cabal\\n' > cabal.project"
  - cat cabal.project
  - echo -en 'travis_fold:end:unpack\\r'
  - echo Building... && echo -en 'travis_fold:start:build\\r'
  # this builds all libraries and executables (without tests/benchmarks)
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all
  - echo -en 'travis_fold:end:build\\r'

  - echo Building with installed constraints for package in global-db... && echo -en 'travis_fold:start:build-installed\\r'
  # Build with installed constraints for packages in global-db
  - if $INSTALLED; then echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks $(${HCPKG} list --global --simple-output --names-only | sed 's/\([a-zA-Z0-9-]\{1,\}\) */--constraint="\1 installed" /g') all | sh; else echo "Not building with installed constraints"; fi
  - echo -en 'travis_fold:end:build-installed\\r'

  - echo Building with tests and benchmarks... && echo -en 'travis_fold:start:build-everything\\r'
  # build & run tests, build benchmarks
  - cabal new-build -w ${HC} ${TEST} ${BENCH} all
  - echo -en 'travis_fold:end:build-everything\\r'
  - echo Testing... && echo -en 'travis_fold:start:test\\r'
  - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} ${BENCH} all; fi
  - echo -en 'travis_fold:end:test\\r'

  - echo cabal check... && echo -en 'travis_fold:start:check\\r'
  # cabal check
  - (cd servant-auth-* && cabal check)
  - (cd servant-auth-client-* && cabal check)
  - (cd servant-auth-docs-* && cabal check)
  - (cd servant-auth-server-* && cabal check)
  - (cd servant-auth-swagger-* && cabal check)

  - echo -en 'travis_fold:end:check\\r'
  - echo Haddock... && echo -en 'travis_fold:start:haddock\\r'
  # haddock
  - rm -rf ./dist-newstyle
  - if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} all; else echo "Skipping haddock generation";fi

  - echo -en 'travis_fold:end:haddock\\r'
# REGENDATA ["--branch","master","-f","-o",".travis.yml","cabal.project"]
# EOF
